import { test } from 'brittle'
import * as pow from '../lib/pow.js'
import { toHex } from '../lib/buf.js'

test('Identity', async (assert) => {
  const blockHash = '2FB2146FC01F21D358323174BAA230E7DE61C0F150B7FBC415C896B0C23E50FF'
  const tid = '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4'

  const { nonce } = await pow.solve(2, blockHash, tid)
  assert.is(nonce, 4n)
  assert.ok(await pow.verify(2, blockHash, tid, nonce))
})

test('Bad inputs', async (assert) => {
  await pow.verify(0, '', '', 0).then(assert.fail).catch(assert.ok)
  await pow.verify(1, '', '', 0).then(assert.fail).catch(assert.ok)
  await pow.verify(1, '', '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', 0).then(assert.fail).catch(assert.ok)
  await pow.verify(1, '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', '', 0).then(assert.fail).catch(assert.ok)
  await pow.verify(1, '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', 0).then(assert.fail).catch(assert.ok)
  assert.absent(await pow.verify(3, '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', 4n))
  assert.ok(await pow.verify(2, '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', 4n))
  assert.ok(await pow.verify(1, '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', 4n))
  assert.ok(await pow.verify(0, '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', 4n))
})

test('Count zeros', async (assert) => {
  const n1 = 424517n // await pow.solve(20, '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', 'DFE522E234D67E6AE3F017859F898E576B3928EA57310B765398615A0D3FDE2F')
  const h1 = await pow.hash('2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', 'DFE522E234D67E6AE3F017859F898E576B3928EA57310B765398615A0D3FDE2F', n1)
  assert.is(toHex(h1), '00000e31f8ac983354f5885d46b7631bc75f69ec82e8f6178bae53db0ab7e054')

  const n2 = 4095356n // await pow.solve(21, '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', '5B87F9DFA41DABE84A11CA78D9FE11DA8FC2AA926004CA66454A7AF0A206480D')
  const h2 = await pow.hash('2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', '5B87F9DFA41DABE84A11CA78D9FE11DA8FC2AA926004CA66454A7AF0A206480D', n2)
  assert.is(toHex(h2), '0000077b7d66117b57e45ccba0c31554e61c9853cc1cd9a2cf09c41b0aa9c22e')

  const n3 = 1751582n // await pow.solve(22, '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', 'B14DD602ED48C9F7B5367105A4A97FFC9199EA0C9E1490B786534768DD1538EF')
  const h3 = await pow.hash('2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4', 'B14DD602ED48C9F7B5367105A4A97FFC9199EA0C9E1490B786534768DD1538EF', n3)
  assert.is(toHex(h3), '000003bbf0cde49e3899ad23282b18defbc12a65f07c95d768464b87024df368')

  const n4 = 11977649n // await pow.solve(23, 'B14DD602ED48C9F7B5367105A4A97FFC9199EA0C9E1490B786534768DD1538EF', '94A9CB1532011081B013CCD8E6AAA832CAB1CBA603F0C5A093B14C4961E5E7F0')
  const h4 = await pow.hash('B14DD602ED48C9F7B5367105A4A97FFC9199EA0C9E1490B786534768DD1538EF', '94A9CB1532011081B013CCD8E6AAA832CAB1CBA603F0C5A093B14C4961E5E7F0', n4)
  assert.is(toHex(h4), '000001e1084b865aba27df7a445753a24a3d89d63c7739a62c11dab3ee6eae32')
})

const vectors = [
  {
    difficulty: 4,
    nonce: 0n,
    blockHash: '792ca202b84226c739f9923046a0f4e7b5ff9e6f1b5636d8e26a8e2c5dec70ac',
    tid: '3b8399cdffee2686d75d1a96d22cd49cd11f62c93da20e72239895bfdaf4b772',
    proof: '03f9f7d9911d3ca37c3356f10cd04273e788d1f57a9bc2396e7b5aa2e8d74557'
  },
  {
    difficulty: 8,
    nonce: 402n,
    blockHash: 'ffb67ea4111d466d363a5c8f355bf81e2e3504563af273f5de81a005a6247e14',
    tid: 'c40de04280ce8c40ee41b5005c23a1358b4fbf31f6dcb675e8246b174458274e',
    proof: '0053ea7687bd7652803af4300a7e17868267c32e4fb7f09375c46c367fd7646b'
  },
  {
    difficulty: 12,
    nonce: 2560n,
    blockHash: 'd9ae00ce4c4fc96d8e72bb18f6990b833cc7724ad70322604c572f6e194d777f',
    tid: 'fcbbb4cc8dcd402a07af050bb809a04bd82f9c95b6e5a56768d3724a4abb09f0',
    proof: '0008bbe071959bfe7fc426c4f378fcdb9540b3f931f4a0b09469f5bf0fddcb86'
  },
  {
    difficulty: 16,
    nonce: 23845n,
    blockHash: 'dc4b61de2138856406acdabcc502be708bff7c945857ea032011a8b4b0cf54f4',
    tid: '3954a15b2e1ec457ae100c56e2aa43786b4612644926403d59fd8cdcb29d825f',
    proof: '00000fd8f55699845ac3192af013928916050eab088437943708b83b27490862'
  },
  {
    difficulty: 20,
    nonce: 85863n,
    blockHash: '8890702af457ddcda01fba579a126adcecae954781500acb546fef9c8087a239',
    tid: '74030ee7dc931be9d9cc5f2c9d44ac174b4144b377ef07a7bb1781856921dd43',
    proof: '000007542dcb39d1471fd6c7424a547b9039382e055ceed10c839f2b76f88c0d'
  }
]

test('Vectors', async (assert) => {
  for (const vector of vectors) {
    const { nonce } = await pow.solve(vector.difficulty, vector.blockHash, vector.tid)
    assert.is(nonce, vector.nonce)
    const hash = await pow.hash(vector.blockHash, vector.tid, nonce)
    assert.is(toHex(hash), vector.proof)
  }
})

test('From PoW engine', async (assert) => {
  const difficulty = 20
  const blockHash = '113EB390CBEB921433BDBA832CCDFD81AC4C77C3748A41B1AF08C96BC6C7BCD9'
  const tid = '2E7A16D9EF690F0D2BEED115FBA13BA2AAA16C8F971910AD88C72B9DB010C7D4'
  const nonce = 596n

  assert.ok(await pow.verify(difficulty, blockHash, tid, nonce))
})
